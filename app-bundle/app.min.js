(()=>{var e={908:(e,s,t)=>{var r=t(685),n=(t(738).config(),t(113).randomUUID),o=t(5),i=o.uuid_valid,a=o.validate_post_data,u=process.env.PORT||null;null===u&&(console.log("\nNot set port or not found .env file"),process.exit());var d=[];r.createServer((function(e,s){process.stdout.write("\nMethod: "+e.method+"\nRequest URL: "+e.url+"\n"),s.setHeader("Content-Type","application/json");try{switch(!0){case"/api/users"===e.url&&("GET"===e.method||"HEAD"===e.method):p(e,s);break;case"/api/users"===e.url&&"POST"===e.method:l(e,s);break;case!e.url.match("/api/users/[a-zA-Z0-9-]+$")?null:"GET"===e.method||"HEAD"===e.method:case!e.url.match("/api/users/[a-zA-Z0-9-]+$")?null:"PUT"===e.method:f(e,s);break;case!e.url.match("/api/users/[a-zA-Z0-9-]+$")?null:"DELETE"===e.method:g(e,s);break;default:c(s)}}catch(e){s.writeHead(JSON.parse(e.message).statusCode),s.write(e.message),s.end("\n")}})).listen(u,"127.0.0.1",(function(){console.log("Start http server!"),console.log("Сервер начал прослушивание запросов на порту "+u)}));var c=function(e){process.stdout.write("Status: 404\nResponse: endpoints not found\n");throw new Error(JSON.stringify({statusCode:404,message:"Uri api http not found"}))},p=function(e,s){process.stdout.write("Status: 200\nResponse: request success\n"),s.statusCode=200,s.write(JSON.stringify(d)+"\n"),s.end()},l=function(e,s){var t="";e.on("data",(function(e){t+=e.toString()})),e.on("end",(function(){try{var e=a(t);if(e.statusCode)throw new Error(JSON.stringify(e));e.uuid=n(),d.push(e),process.stdout.write("Status: 201\nResponse: create user success\n"),s.writeHead(201),s.write(JSON.stringify(e)),s.end("\n")}catch(e){s.writeHead(JSON.parse(e.message).statusCode),s.write(e.message),s.end()}}))},f=function(e,s){var t=e.url.split("/").slice(-1).join();if(!i(t)){process.stdout.write("Status: 400\nResponse: in valid uuid\n");throw new Error(JSON.stringify({statusCode:400,message:"Get parametr uuid not valid"}))}var r=d.find((function(e){return e.uuid===t}));if(!r){process.stdout.write("Status: 404\nResponse: not found user\n");throw new Error(JSON.stringify({statusCode:404,message:"Not found users is get UUID"}))}process.stdout.write("Status: 200\nResponse: get user success\n"),s.writeHead(200),s.write(JSON.stringify(r)),s.end("\n")},g=function e(s,t){var r=s.url.split("/").slice(-1).join();if(!i(r)){process.stdout.write("Status: 400\nResponse: in valid uuid\n");throw new Error(JSON.stringify({statusCode:400,message:"Get parametr uuid not valid"}))}var n=d.findIndex((function(e){return e.uuid===r}));if(-1==n){process.stdout.write("Status: 404\nResponse: not found user\n");throw new Error(JSON.stringify({statusCode:404,message:"Not found users is get UUID"}))}d.splice(n,1);e.length>0&&(process.stdout.write("Status: 204\nResponse: delete user success\n"),t.writeHead(204),t.end())}},505:()=>{process.on("SIGINT",(function(e){process.exit()})),process.on("exit",(function(e){console.log("\nServer is stoped")}))},5:e=>{e.exports={uuid_valid:function(e){return!![/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1][0-9a-fA-F]{3}-[89AB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/gi,/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[2][0-9a-fA-F]{3}-[89AB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/gi,/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[3][0-9a-fA-F]{3}-[89AB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/gi,/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89AB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/gi,/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[5][0-9a-fA-F]{3}-[89AB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/gi].find((function(s){return!0===s.test(e)}))},validate_post_data:function(e){try{var s=JSON.parse(e);if("number"==typeof s.age&&"string"==typeof s.username&&Array.isArray(s.hobbies)&&!s.hobbies.find((function(e){return"string"!=typeof e})))return s;process.stdout.write("Status: 400\nError validate request body. Check for required fields\n");return{statusCode:400,message:"Error validate request body. Check for required fields"}}catch(e){process.stdout.write("Status: 400\n"+e.message+"\n");var t={statusCode:400,message:e.message};throw new Error(JSON.stringify(t))}}}},738:(e,s,t)=>{const r=t(147),n=t(17),o=t(37),i=t(968).version,a=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function u(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}const d={config:function(e){let s=n.resolve(process.cwd(),".env"),t="utf8";const i=Boolean(e&&e.debug),a=Boolean(e&&e.override);var c;e&&(null!=e.path&&(s="~"===(c=e.path)[0]?n.join(o.homedir(),c.slice(1)):c),null!=e.encoding&&(t=e.encoding));try{const e=d.parse(r.readFileSync(s,{encoding:t}));return Object.keys(e).forEach((function(s){Object.prototype.hasOwnProperty.call(process.env,s)?(!0===a&&(process.env[s]=e[s]),i&&u(!0===a?`"${s}" is already defined in \`process.env\` and WAS overwritten`:`"${s}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[s]=e[s]})),{parsed:e}}catch(e){return i&&u(`Failed to load ${s} ${e.message}`),{error:e}}},parse:function(e){const s={};let t,r=e.toString();for(r=r.replace(/\r\n?/gm,"\n");null!=(t=a.exec(r));){const e=t[1];let r=t[2]||"";r=r.trim();const n=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===n&&(r=r.replace(/\\n/g,"\n"),r=r.replace(/\\r/g,"\r")),s[e]=r}return s}};e.exports.config=d.config,e.exports.parse=d.parse,e.exports=d},113:e=>{"use strict";e.exports=require("crypto")},147:e=>{"use strict";e.exports=require("fs")},685:e=>{"use strict";e.exports=require("http")},37:e=>{"use strict";e.exports=require("os")},17:e=>{"use strict";e.exports=require("path")},968:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.0.3","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"require":"./lib/main.js","types":"./lib/main.d.ts","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^17.0.9","decache":"^4.6.1","dtslint":"^3.7.0","sinon":"^12.0.1","standard":"^16.0.4","standard-markdown":"^7.1.0","standard-version":"^9.3.2","tap":"^15.1.6","tar":"^6.1.11","typescript":"^4.5.4"},"engines":{"node":">=12"}}')}},s={};function t(r){var n=s[r];if(void 0!==n)return n.exports;var o=s[r]={exports:{}};return e[r](o,o.exports,t),o.exports}t(908),t(505)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,