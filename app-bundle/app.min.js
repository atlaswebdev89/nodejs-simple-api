(()=>{var e={505:()=>{process.on("SIGINT",(function(e){process.exit()})),process.on("exit",(function(e){console.log("\nServer is stoped")}))},738:(e,s,n)=>{const o=n(147),t=n(17),r=n(37),i=n(968).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function a(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}const l={config:function(e){let s=t.resolve(process.cwd(),".env"),n="utf8";const i=Boolean(e&&e.debug),c=Boolean(e&&e.override);var p;e&&(null!=e.path&&(s="~"===(p=e.path)[0]?t.join(r.homedir(),p.slice(1)):p),null!=e.encoding&&(n=e.encoding));try{const e=l.parse(o.readFileSync(s,{encoding:n}));return Object.keys(e).forEach((function(s){Object.prototype.hasOwnProperty.call(process.env,s)?(!0===c&&(process.env[s]=e[s]),i&&a(!0===c?`"${s}" is already defined in \`process.env\` and WAS overwritten`:`"${s}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[s]=e[s]})),{parsed:e}}catch(e){return i&&a(`Failed to load ${s} ${e.message}`),{error:e}}},parse:function(e){const s={};let n,o=e.toString();for(o=o.replace(/\r\n?/gm,"\n");null!=(n=c.exec(o));){const e=n[1];let o=n[2]||"";o=o.trim();const t=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===t&&(o=o.replace(/\\n/g,"\n"),o=o.replace(/\\r/g,"\r")),s[e]=o}return s}};e.exports.config=l.config,e.exports.parse=l.parse,e.exports=l},147:e=>{"use strict";e.exports=require("fs")},685:e=>{"use strict";e.exports=require("http")},37:e=>{"use strict";e.exports=require("os")},17:e=>{"use strict";e.exports=require("path")},968:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.0.3","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"require":"./lib/main.js","types":"./lib/main.d.ts","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^17.0.9","decache":"^4.6.1","dtslint":"^3.7.0","sinon":"^12.0.1","standard":"^16.0.4","standard-markdown":"^7.1.0","standard-version":"^9.3.2","tap":"^15.1.6","tar":"^6.1.11","typescript":"^4.5.4"},"engines":{"node":">=12"}}')}},s={};function n(o){var t=s[o];if(void 0!==t)return t.exports;var r=s[o]={exports:{}};return e[o](r,r.exports,n),r.exports}(()=>{var e=n(685),s=(n(505),n(738).config(),process.env.PORT?process.env.PORT:null);null===s&&(console.log("\nNot set port or not found .env file"),process.exit());var o="Hello World!";e.createServer((function(e,s){console.log(o),s.end(o)})).listen(s,"127.0.0.1",(function(){console.log("Сервер начал прослушивание запросов на пору "+s)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,